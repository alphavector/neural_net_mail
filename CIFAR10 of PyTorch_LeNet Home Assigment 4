{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CIFAR10 of PyTorch_LeNet Home Assigment 4","version":"0.3.2","provenance":[{"file_id":"1BmVCwlBZbewgL8J8uqZ5TAltEex9DwGE","timestamp":1540401417753},{"file_id":"1fyZ7vCipkJr6I2PM3si5uCQ0Q_XrnT9H","timestamp":1540396515560},{"file_id":"1DRAW8OcstFTIuvMEPZxpETuChjL-M0DX","timestamp":1540376183845}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"xKt6t6EdrO9R","colab_type":"text"},"cell_type":"markdown","source":["### Задание на дом:\n","\n","1. Создать модуль с  архитектурой LeNet и обучить на CIFAR10 до 60%\n","2. Создать текстовое описание (в текстовой ячейке не в комментариях!) для каждого слоя с указанием размерности карт признаков, полносвязных слоев"]},{"metadata":{"id":"wwBCJvt1OQAm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":55},"outputId":"5074d0e4-0c5f-4f01-dd88-9f3c5346ee55","executionInfo":{"status":"ok","timestamp":1541483368973,"user_tz":-180,"elapsed":53323,"user":{"displayName":"AFYDOZ","photoUrl":"","userId":"05462912882712587906"}}},"cell_type":"code","source":["# http://pytorch.org/\n","from os.path import exists\n","from wheel.pep425tags import get_abbr_impl, get_impl_ver, get_abi_tag\n","platform = '{}{}-{}'.format(get_abbr_impl(), get_impl_ver(), get_abi_tag())\n","cuda_output = !ldconfig -p|grep cudart.so|sed -e 's/.*\\.\\([0-9]*\\)\\.\\([0-9]*\\)$/cu\\1\\2/'\n","accelerator = cuda_output[0] if exists('/dev/nvidia0') else 'cpu'\n","\n","!pip install -q http://download.pytorch.org/whl/{accelerator}/torch-0.4.1-{platform}-linux_x86_64.whl torchvision\n","import torch\n","import torchvision"],"execution_count":1,"outputs":[{"output_type":"stream","text":["tcmalloc: large alloc 1073750016 bytes == 0x57b06000 @  0x7fcfd15dd2a4 0x594e17 0x626104 0x51190a 0x4f5277 0x510c78 0x5119bd 0x4f5277 0x4f3338 0x510fb0 0x5119bd 0x4f5277 0x4f3338 0x510fb0 0x5119bd 0x4f5277 0x4f3338 0x510fb0 0x5119bd 0x4f6070 0x510c78 0x5119bd 0x4f5277 0x4f3338 0x510fb0 0x5119bd 0x4f6070 0x4f3338 0x510fb0 0x5119bd 0x4f6070\n"],"name":"stdout"}]},{"metadata":{"id":"FZoVWCUlOULC","colab_type":"code","colab":{}},"cell_type":"code","source":["import torch.nn as nn"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-VhSrpvVS5xw","colab_type":"text"},"cell_type":"markdown","source":["[nn.Conv2d](https://pytorch.org/docs/stable/nn.html#torch.nn.Conv2d)(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias)\n","\n","**in_channels** (int) – Количество каналов на входе\n","\n","**out_channels** (int) – Количество каналов в карте признаков\n","\n","**kernel_size** (int or tuple) – Размер ядра\n","\n","**stride** (int or tuple, optional) – Шаг ядра. Default: 1\n","\n","**padding** (int or tuple, optional) – Отступ. Default: 0\n","\n","**dilation** (int or tuple, optional) – Расстояние между элементами ядра. Default: 1\n","\n","**groups** (int, optional) – Группировка сверток. Default: 1\n","\n","**bias** (bool, optional) – Если True, добавляет bias. Default: True\n","\n","Пример использования:      self.conv1 = nn.Conv2d(1,6,5)\n"]},{"metadata":{"id":"FIdmD_hSXV-D","colab_type":"text"},"cell_type":"markdown","source":["\n","[nn.AvgPool2d](https://pytorch.org/docs/stable/nn.html#torch.nn.AvgPool2d)(kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True)\n","\n","**kernel_size** – размер окна\n","\n","**stride** – Шаг окна. Default - kernel_size\n","\n","**padding** – Отступ \n","\n","**ceil_mode** – Если True, округляет в большую сторону при определении output shape\n","\n","**count_include_pad** – Если True, учитывает отступ вокруг входноого вектора при вычислении\n","\n","Пример использования:      self.pool1 = nn.AvgPool2d(2,2)"]},{"metadata":{"id":"21t71UpDXkeM","colab_type":"text"},"cell_type":"markdown","source":["\n","[nn.ReLU](https://pytorch.org/docs/stable/nn.html#torch.nn.ReLU)\n","\n","Активационная функция ReLU - $$ReLU(x)=max(0,x)$$\n","\n","Пример использования:      self.relu1 = nn.ReLU()\n","\n","![График функции ReLU](https://pytorch.org/docs/stable/_images/ReLU.png)\n","\n","[nn.MaxPool2d](https://pytorch.org/docs/stable/nn.html#torch.nn.MaxPool2d) (kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False)\n","\n","\n","**kernel_size** – размер окна\n","\n","**stride** – Шаг окна. Default - kernel_size\n","\n","**padding** – Отступ \n","\n","**dilation** – Параметр отвечающий за отступ внутри окна\n","\n","**return_indices** – Если True, возвращает максимальный индекс из выходного вектора. Используется при операции Unpooling\n","\n","**ceil_mode** – Если True, округляет в большую сторону при определении output shape\n","\n","Пример использования:      self.pool1 = nn.MaxPool2d(2,2)"]},{"metadata":{"id":"zt5IdW1QaGIY","colab_type":"text"},"cell_type":"markdown","source":["### Код"]},{"metadata":{"id":"9Tb9Qtv4XdEi","colab_type":"code","outputId":"3d7b05c3-8045-44ed-9ea5-8661073ee3dc","executionInfo":{"status":"ok","timestamp":1541483392350,"user_tz":-180,"elapsed":17893,"user":{"displayName":"AFYDOZ","photoUrl":"","userId":"05462912882712587906"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["from torch.utils.data import DataLoader\n","from torchvision import transforms\n","\n","\n","data_train = torchvision.datasets.CIFAR10('./pytorch_data/cifar10',\n","                   download=True,\n","                   transform=transforms.Compose([transforms.ToTensor()]))\n","data_test = torchvision.datasets.CIFAR10('./pytorch_data/cifar10',\n","                  train=False,\n","                  download=True,\n","                  transform=transforms.Compose([transforms.ToTensor()]))\n","data_train_loader = DataLoader(data_train, batch_size=100, shuffle=True, num_workers=8)\n","data_test_loader = DataLoader(data_test, batch_size=100, num_workers=8)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./pytorch_data/cifar10/cifar-10-python.tar.gz\n","Files already downloaded and verified\n"],"name":"stdout"}]},{"metadata":{"id":"qHyOm1KaPoL9","colab_type":"code","outputId":"08fa04e0-d865-4b00-91f6-334c6130d1b1","executionInfo":{"status":"ok","timestamp":1541483394205,"user_tz":-180,"elapsed":552,"user":{"displayName":"AFYDOZ","photoUrl":"","userId":"05462912882712587906"}},"colab":{"base_uri":"https://localhost:8080/","height":191}},"cell_type":"code","source":["class LeNet(nn.Module):\n","  \"\"\"\n","Input = torch.Size([100, 3, 32, 32])\n","Conv1 = torch.Size([100, 6, 28, 28])\n","l1= torch.Size([100, 6, 28, 28])\n","l2= torch.Size([100, 6, 14, 14])\n","l3= torch.Size([100, 16, 10, 10])\n","l4= torch.Size([100, 16, 10, 10])\n","l5= torch.Size([100, 16, 5, 5])\n","l6= torch.Size([100, 120])\n","l7= torch.Size([100, 84])\n","l8= torch.Size([100, 84])\n","l9= torch.Size([100, 10])\n","\"\"\"\n","  def __init__(self):\n","    super(LeNet, self).__init__()\n","    self.conv1 = nn.Conv2d(3,6,(5,5))\n","    self.pool2 = nn.AvgPool2d((2,2),stride=2)\n","    self.conv3 = nn.Conv2d(6,16,(5,5))\n","    self.pool4 = nn.AvgPool2d((2,2),stride=2)\n","    self.conv5 = nn.Conv2d(16,120,(5,5))\n","    self.f6 = nn.Linear(120,84)\n","    self.f7 = nn.Linear(84,10)\n","    self.ReLU = nn.ReLU()\n","    \n","    pass\n","  def forward(self,x):\n","    \n","    l0 = self.conv1(x)\n","    l1 = self.ReLU(l0)\n","    l2 = self.pool2(l1)\n","    l3 = self.conv3(l2)\n","    l4 = self.ReLU(l3)\n","    l5 = self.pool4(l4)\n","    l6 = self.conv5(l5).view(-1,120)\n","    l7 = self.f6(l6)\n","    l8 = self.ReLU(l7)\n","    l9 = self.f7(l8)\n","    return l9\n","    \n","LeNet()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LeNet(\n","  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n","  (pool2): AvgPool2d(kernel_size=(2, 2), stride=2, padding=0)\n","  (conv3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n","  (pool4): AvgPool2d(kernel_size=(2, 2), stride=2, padding=0)\n","  (conv5): Conv2d(16, 120, kernel_size=(5, 5), stride=(1, 1))\n","  (f6): Linear(in_features=120, out_features=84, bias=True)\n","  (f7): Linear(in_features=84, out_features=10, bias=True)\n","  (ReLU): ReLU()\n",")"]},"metadata":{"tags":[]},"execution_count":4}]},{"metadata":{"id":"VTKkPFqO7MvZ","colab_type":"text"},"cell_type":"markdown","source":["Размерности карт признаков \n","* Input -  3x32x32\n","* Conv1 -  6x28x28\n","* Pool2 -  6x14x14\n","* Conv3 -  16x10x10\n","* Pool4 -  16x5x5\n","* Conv5 -  120\n","* F6 -  84\n","* F7 -  10\n","\n"]},{"metadata":{"id":"UDENo_4i5Sbw","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"YcLFtlQ6XpNw","colab_type":"code","outputId":"6c78f3cc-26f9-4e6a-aff3-7441b22cc144","executionInfo":{"status":"ok","timestamp":1541483816492,"user_tz":-180,"elapsed":420027,"user":{"displayName":"AFYDOZ","photoUrl":"","userId":"05462912882712587906"}},"colab":{"base_uri":"https://localhost:8080/","height":3519}},"cell_type":"code","source":["device = (\"cuda:0\" if torch.cuda.is_available() else \"gpu\")\n","print(device)\n","import time\n","def accuracy(output,labels):\n","  predictions = torch.argmax(output,dim=1)\n","  correct = (predictions == labels).sum().cpu().numpy()\n","  return correct / len(labels)\n","\n","\n","model = LeNet()\n","\n","#Переводит модель в режим обучения\n","model.train()\n","model.to(device)\n","\n","\n","loss_func = nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(),lr=1e-3)\n","\n","\n","start_time = time.time()\n","for epoch in range(40):\n","  for itr,data in enumerate(data_train_loader):\n","    imgs = data[0].to(device)\n","    labels = data[1].to(device)\n","\n","    #imgs = imgs.view(-1,28*28)\n","    \n","    y_pred = model.forward(imgs)\n","\n","    optimizer.zero_grad()\n","    \n","    loss = loss_func(y_pred,labels)\n","    if itr%100 == 0:\n","      print('Iteration {}, train accuracy {:.2f}, loss {:.4f}'.format(itr+epoch*len(data_train_loader),accuracy(y_pred,labels),loss))\n","      \n","    loss.backward()\n","    \n","    optimizer.step()\n","    \n","print('Total time {:.4f} seconds'.format(time.time() - start_time))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["cuda:0\n","Iteration 0, train accuracy 0.10, loss 2.3027\n","Iteration 100, train accuracy 0.24, loss 2.0364\n","Iteration 200, train accuracy 0.38, loss 1.8158\n","Iteration 300, train accuracy 0.29, loss 1.7721\n","Iteration 400, train accuracy 0.39, loss 1.5426\n","Iteration 500, train accuracy 0.39, loss 1.7353\n","Iteration 600, train accuracy 0.42, loss 1.6861\n","Iteration 700, train accuracy 0.40, loss 1.6710\n","Iteration 800, train accuracy 0.45, loss 1.5972\n","Iteration 900, train accuracy 0.42, loss 1.4967\n","Iteration 1000, train accuracy 0.42, loss 1.5057\n","Iteration 1100, train accuracy 0.47, loss 1.4205\n","Iteration 1200, train accuracy 0.53, loss 1.4501\n","Iteration 1300, train accuracy 0.44, loss 1.4856\n","Iteration 1400, train accuracy 0.50, loss 1.4635\n","Iteration 1500, train accuracy 0.59, loss 1.2155\n","Iteration 1600, train accuracy 0.48, loss 1.3731\n","Iteration 1700, train accuracy 0.47, loss 1.3558\n","Iteration 1800, train accuracy 0.48, loss 1.4028\n","Iteration 1900, train accuracy 0.48, loss 1.3912\n","Iteration 2000, train accuracy 0.57, loss 1.1863\n","Iteration 2100, train accuracy 0.51, loss 1.4128\n","Iteration 2200, train accuracy 0.56, loss 1.2474\n","Iteration 2300, train accuracy 0.52, loss 1.2360\n","Iteration 2400, train accuracy 0.49, loss 1.4803\n","Iteration 2500, train accuracy 0.50, loss 1.2069\n","Iteration 2600, train accuracy 0.60, loss 1.1275\n","Iteration 2700, train accuracy 0.53, loss 1.2768\n","Iteration 2800, train accuracy 0.61, loss 1.2528\n","Iteration 2900, train accuracy 0.56, loss 1.1156\n","Iteration 3000, train accuracy 0.58, loss 1.1216\n","Iteration 3100, train accuracy 0.47, loss 1.2957\n","Iteration 3200, train accuracy 0.64, loss 1.1076\n","Iteration 3300, train accuracy 0.54, loss 1.4277\n","Iteration 3400, train accuracy 0.58, loss 1.2393\n","Iteration 3500, train accuracy 0.55, loss 1.2610\n","Iteration 3600, train accuracy 0.52, loss 1.2108\n","Iteration 3700, train accuracy 0.59, loss 1.1544\n","Iteration 3800, train accuracy 0.58, loss 1.1216\n","Iteration 3900, train accuracy 0.52, loss 1.3129\n","Iteration 4000, train accuracy 0.58, loss 1.1969\n","Iteration 4100, train accuracy 0.56, loss 1.1569\n","Iteration 4200, train accuracy 0.58, loss 1.2331\n","Iteration 4300, train accuracy 0.52, loss 1.2151\n","Iteration 4400, train accuracy 0.64, loss 1.0050\n","Iteration 4500, train accuracy 0.62, loss 1.0726\n","Iteration 4600, train accuracy 0.57, loss 1.0999\n","Iteration 4700, train accuracy 0.60, loss 1.0780\n","Iteration 4800, train accuracy 0.64, loss 1.0975\n","Iteration 4900, train accuracy 0.70, loss 0.9611\n","Iteration 5000, train accuracy 0.61, loss 0.9910\n","Iteration 5100, train accuracy 0.60, loss 1.1155\n","Iteration 5200, train accuracy 0.52, loss 1.3906\n","Iteration 5300, train accuracy 0.64, loss 1.0454\n","Iteration 5400, train accuracy 0.55, loss 1.0536\n","Iteration 5500, train accuracy 0.70, loss 0.9532\n","Iteration 5600, train accuracy 0.67, loss 1.0007\n","Iteration 5700, train accuracy 0.58, loss 1.1195\n","Iteration 5800, train accuracy 0.60, loss 1.0391\n","Iteration 5900, train accuracy 0.61, loss 1.0558\n","Iteration 6000, train accuracy 0.58, loss 1.0968\n","Iteration 6100, train accuracy 0.66, loss 1.0317\n","Iteration 6200, train accuracy 0.56, loss 1.2088\n","Iteration 6300, train accuracy 0.64, loss 0.8950\n","Iteration 6400, train accuracy 0.59, loss 1.1742\n","Iteration 6500, train accuracy 0.59, loss 1.2197\n","Iteration 6600, train accuracy 0.70, loss 0.8194\n","Iteration 6700, train accuracy 0.63, loss 1.0808\n","Iteration 6800, train accuracy 0.71, loss 0.9341\n","Iteration 6900, train accuracy 0.64, loss 0.9374\n","Iteration 7000, train accuracy 0.63, loss 1.2349\n","Iteration 7100, train accuracy 0.49, loss 1.2183\n","Iteration 7200, train accuracy 0.66, loss 1.0891\n","Iteration 7300, train accuracy 0.66, loss 0.9050\n","Iteration 7400, train accuracy 0.59, loss 1.1465\n","Iteration 7500, train accuracy 0.64, loss 0.9055\n","Iteration 7600, train accuracy 0.60, loss 1.3299\n","Iteration 7700, train accuracy 0.52, loss 1.3014\n","Iteration 7800, train accuracy 0.57, loss 1.1594\n","Iteration 7900, train accuracy 0.64, loss 1.0422\n","Iteration 8000, train accuracy 0.70, loss 0.9442\n","Iteration 8100, train accuracy 0.68, loss 0.9470\n","Iteration 8200, train accuracy 0.61, loss 0.9891\n","Iteration 8300, train accuracy 0.63, loss 0.9676\n","Iteration 8400, train accuracy 0.68, loss 1.0634\n","Iteration 8500, train accuracy 0.69, loss 0.8834\n","Iteration 8600, train accuracy 0.65, loss 1.0147\n","Iteration 8700, train accuracy 0.57, loss 1.3029\n","Iteration 8800, train accuracy 0.56, loss 1.1034\n","Iteration 8900, train accuracy 0.68, loss 0.8312\n","Iteration 9000, train accuracy 0.60, loss 0.9962\n","Iteration 9100, train accuracy 0.67, loss 0.9931\n","Iteration 9200, train accuracy 0.73, loss 0.9132\n","Iteration 9300, train accuracy 0.68, loss 0.9192\n","Iteration 9400, train accuracy 0.67, loss 0.9667\n","Iteration 9500, train accuracy 0.64, loss 0.9360\n","Iteration 9600, train accuracy 0.62, loss 0.9772\n","Iteration 9700, train accuracy 0.66, loss 0.9831\n","Iteration 9800, train accuracy 0.62, loss 1.0481\n","Iteration 9900, train accuracy 0.67, loss 0.8303\n","Iteration 10000, train accuracy 0.71, loss 0.8247\n","Iteration 10100, train accuracy 0.68, loss 0.9698\n","Iteration 10200, train accuracy 0.66, loss 0.8993\n","Iteration 10300, train accuracy 0.62, loss 1.1090\n","Iteration 10400, train accuracy 0.73, loss 0.8401\n","Iteration 10500, train accuracy 0.68, loss 0.8946\n","Iteration 10600, train accuracy 0.64, loss 0.8369\n","Iteration 10700, train accuracy 0.71, loss 0.9059\n","Iteration 10800, train accuracy 0.65, loss 0.9199\n","Iteration 10900, train accuracy 0.64, loss 0.9985\n","Iteration 11000, train accuracy 0.71, loss 0.9748\n","Iteration 11100, train accuracy 0.67, loss 0.8432\n","Iteration 11200, train accuracy 0.62, loss 1.0673\n","Iteration 11300, train accuracy 0.69, loss 0.9485\n","Iteration 11400, train accuracy 0.71, loss 0.9250\n","Iteration 11500, train accuracy 0.72, loss 0.8757\n","Iteration 11600, train accuracy 0.65, loss 0.9221\n","Iteration 11700, train accuracy 0.69, loss 0.8990\n","Iteration 11800, train accuracy 0.68, loss 0.8756\n","Iteration 11900, train accuracy 0.56, loss 1.1403\n","Iteration 12000, train accuracy 0.67, loss 0.9040\n","Iteration 12100, train accuracy 0.77, loss 0.6813\n","Iteration 12200, train accuracy 0.66, loss 0.9211\n","Iteration 12300, train accuracy 0.73, loss 0.8679\n","Iteration 12400, train accuracy 0.70, loss 0.9777\n","Iteration 12500, train accuracy 0.64, loss 0.9796\n","Iteration 12600, train accuracy 0.70, loss 0.8893\n","Iteration 12700, train accuracy 0.66, loss 0.9839\n","Iteration 12800, train accuracy 0.72, loss 0.9109\n","Iteration 12900, train accuracy 0.67, loss 0.9913\n","Iteration 13000, train accuracy 0.67, loss 0.7907\n","Iteration 13100, train accuracy 0.69, loss 0.9139\n","Iteration 13200, train accuracy 0.71, loss 0.8248\n","Iteration 13300, train accuracy 0.62, loss 0.9581\n","Iteration 13400, train accuracy 0.78, loss 0.6988\n","Iteration 13500, train accuracy 0.68, loss 0.8123\n","Iteration 13600, train accuracy 0.73, loss 0.8721\n","Iteration 13700, train accuracy 0.60, loss 0.9653\n","Iteration 13800, train accuracy 0.69, loss 0.8556\n","Iteration 13900, train accuracy 0.73, loss 0.7056\n","Iteration 14000, train accuracy 0.64, loss 0.9286\n","Iteration 14100, train accuracy 0.65, loss 0.8622\n","Iteration 14200, train accuracy 0.63, loss 0.9914\n","Iteration 14300, train accuracy 0.70, loss 0.8685\n","Iteration 14400, train accuracy 0.71, loss 0.7636\n","Iteration 14500, train accuracy 0.78, loss 0.6998\n","Iteration 14600, train accuracy 0.68, loss 0.8510\n","Iteration 14700, train accuracy 0.67, loss 0.9981\n","Iteration 14800, train accuracy 0.76, loss 0.7056\n","Iteration 14900, train accuracy 0.75, loss 0.7117\n","Iteration 15000, train accuracy 0.74, loss 0.8013\n","Iteration 15100, train accuracy 0.73, loss 0.8832\n","Iteration 15200, train accuracy 0.76, loss 0.6920\n","Iteration 15300, train accuracy 0.75, loss 0.8313\n","Iteration 15400, train accuracy 0.74, loss 0.7690\n","Iteration 15500, train accuracy 0.68, loss 0.8916\n","Iteration 15600, train accuracy 0.73, loss 0.8580\n","Iteration 15700, train accuracy 0.73, loss 0.7769\n","Iteration 15800, train accuracy 0.68, loss 0.9182\n","Iteration 15900, train accuracy 0.78, loss 0.7043\n","Iteration 16000, train accuracy 0.80, loss 0.6822\n","Iteration 16100, train accuracy 0.76, loss 0.7513\n","Iteration 16200, train accuracy 0.66, loss 1.0170\n","Iteration 16300, train accuracy 0.76, loss 0.7340\n","Iteration 16400, train accuracy 0.68, loss 0.8601\n","Iteration 16500, train accuracy 0.74, loss 0.7006\n","Iteration 16600, train accuracy 0.81, loss 0.5715\n","Iteration 16700, train accuracy 0.79, loss 0.5271\n","Iteration 16800, train accuracy 0.76, loss 0.8980\n","Iteration 16900, train accuracy 0.66, loss 0.8811\n","Iteration 17000, train accuracy 0.82, loss 0.5901\n","Iteration 17100, train accuracy 0.79, loss 0.6121\n","Iteration 17200, train accuracy 0.70, loss 0.7577\n","Iteration 17300, train accuracy 0.80, loss 0.6168\n","Iteration 17400, train accuracy 0.71, loss 0.7917\n","Iteration 17500, train accuracy 0.76, loss 0.6404\n","Iteration 17600, train accuracy 0.69, loss 1.0229\n","Iteration 17700, train accuracy 0.72, loss 0.6900\n","Iteration 17800, train accuracy 0.71, loss 0.8217\n","Iteration 17900, train accuracy 0.74, loss 0.6753\n","Iteration 18000, train accuracy 0.76, loss 0.7212\n","Iteration 18100, train accuracy 0.78, loss 0.6146\n","Iteration 18200, train accuracy 0.73, loss 0.6898\n","Iteration 18300, train accuracy 0.77, loss 0.7708\n","Iteration 18400, train accuracy 0.67, loss 0.8769\n","Iteration 18500, train accuracy 0.69, loss 0.8940\n","Iteration 18600, train accuracy 0.69, loss 0.6791\n","Iteration 18700, train accuracy 0.82, loss 0.6019\n","Iteration 18800, train accuracy 0.72, loss 0.7734\n","Iteration 18900, train accuracy 0.69, loss 0.8945\n","Iteration 19000, train accuracy 0.77, loss 0.6881\n","Iteration 19100, train accuracy 0.74, loss 0.8128\n","Iteration 19200, train accuracy 0.79, loss 0.6177\n","Iteration 19300, train accuracy 0.75, loss 0.6708\n","Iteration 19400, train accuracy 0.75, loss 0.6452\n","Iteration 19500, train accuracy 0.74, loss 0.7376\n","Iteration 19600, train accuracy 0.68, loss 0.7480\n","Iteration 19700, train accuracy 0.79, loss 0.6818\n","Iteration 19800, train accuracy 0.66, loss 0.9085\n","Iteration 19900, train accuracy 0.78, loss 0.7101\n","Total time 416.4774 seconds\n"],"name":"stdout"}]},{"metadata":{"id":"n56BmGZtZp05","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np\n","##TESTMEHERE##"],"execution_count":0,"outputs":[]},{"metadata":{"id":"seKt1z-OhmUE","colab_type":"code","outputId":"a3a23371-98ff-4efc-d2dd-87a1d05e09b5","executionInfo":{"status":"ok","timestamp":1541483840361,"user_tz":-180,"elapsed":2310,"user":{"displayName":"AFYDOZ","photoUrl":"","userId":"05462912882712587906"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["model.eval()\n","import numpy as np\n","with torch.no_grad():\n","  accuracy_list = []\n","  for itr,data in enumerate(data_test_loader):\n","    imgs = data[0].to(device)\n","    labels = data[1].to(device)\n","\n","    #imgs = imgs.view(-1,28*28)\n","    \n","    y_pred = model.forward(imgs)\n","    accuracy_list.append(accuracy(y_pred,labels))\n","\n","print('Test accuracy - {:.2f}'.format(np.sum(accuracy_list)/len(accuracy_list)))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Test accuracy - 0.62\n"],"name":"stdout"}]},{"metadata":{"id":"uPp9Tgh0mLne","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}